/**
 * {{ properCase name }}
 */

import React from 'react';
import PropTypes from 'prop-types';
{{#if wantHeaders}}
import { Helmet } from 'react-helmet';
{{/if}}
import { compose } from 'redux';
import { connect } from 'react-redux';
{{#if wantMessages}}
import { FormattedMessage } from 'react-intl';
{{/if}}
{{#if wantActionsAndReducer}}
import { createStructuredSelector } from 'reselect';
{{/if}}

{{#if wantSaga}}
import injectSaga from 'utils/injectSaga';
{{/if}}
{{#if wantModels}}
import injectModels from 'utils/injectModels';
{{/if}}
{{#if wantActionsAndReducer}}
import injectReducer from 'utils/injectReducer';
{{/if}}

{{#if wantSaga}}
import saga from './saga';
{{/if}}
{{#if wantModels}}
import * as models from './models';
{{/if}}
{{#if wantActionsAndReducer}}
import reducer from './reducer';
import makeSelect{{ properCase name }} from './selectors';
{{/if}}

{{#if wantMessages}}
import messages from './messages';
{{/if}}

const {{ properCase name }} = () => (
  <div>
  {{#if wantHeaders}}
    <Helmet>
      <title>{{ properCase name }}</title>
      <meta name="description" content="Description of {{ properCase name }}" />
    </Helmet>
  {{/if}}
  {{#if wantMessages}}
    <FormattedMessage {...messages.header} />
  {{/if}}
  </div>
);

{{ properCase name }}.propTypes = {
  dispatch: PropTypes.func.isRequired,
};

{{#if wantActionsAndReducer}}
const mapStateToProps = createStructuredSelector({
  {{ lowerCase name }}: makeSelect{{ properCase name }}(),
});
{{/if}}

const mapDispatchToProps = dispatch => ({
  dispatch,
});

{{#if wantSaga}}
const withSaga = injectSaga({ key: '{{ lowerCase name }}', saga });
{{/if}}

{{#if wantModels}}
const withModels = injectModels(models);
{{/if}}

{{#if wantActionsAndReducer}}
const withReducer = injectReducer({ key: '{{ lowerCase name }}', reducer });

const withConnect = connect(mapStateToProps, mapDispatchToProps);
{{else}}
const withConnect = connect(null, mapDispatchToProps);
{{/if}}

export default compose({{#if wantSaga}}withSaga, {{/if}}{{#if wantModels}}withModels, {{/if}}{{#if wantActionsAndReducer}}withReducer, {{/if}}withConnect)({{ properCase name }});
